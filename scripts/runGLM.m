function glmStructure = runGLM(fpData)
%
% Run a generalized linear model on trial by trial dlight signal by behavioral events and deeplabcut velocity. 
%
% Input: 
%       fpData:             structure with dlight data and dlc data for each session
%
% Output: 
%       glmStructure:       structure with p-values and slopes generated by GLME for each neuron



    % Set GLM parameters.
    fpTrialStart = 1500;
    trialStart = 0;
    trialEnd = 18;      % Use for the actual GLME to look at ramp only within trial.
    binSize = 0.15;     % seconds
    timep = (trialStart + binSize : binSize : trialEnd)';
   
    % Run the GLM.
    glmStructure = [];

    % Pull out velocity for correct, long trials.
    frameRate = fpData.dlc.frameRate;
    if frameRate == 30
        velocityData = fpData.dlc.velocity.LongTrials(:, 121 : 659);
    else
        velocityData = fpData.dlc.velocity.LongTrials(:, 241 : 1319);
    end
    % mouseID = char(fpData.animalID);
    % behaviorData = fpData.TrialAnSt.(mouseID);  % Identify the long trials that are correct
    % longTrials = find(cellfun(@(x) x == 18000, {behaviorData.programmedDuration}));
    % correctTrials = find(cellfun(@(x) ~isempty(x), {behaviorData.reward}));
    % correctLongTrials = ismember(longTrials, correctTrials);
    % velocityData = fpData.dlc.velocity.LongTrials(longTrials,:);
    % velocityData = velocityData(:, 241 : 1319);

    % Bin average velocity     
    framesPerBin = frameRate * binSize;       
    nBins = round(size(velocityData,2)/framesPerBin);
    binnedVelocity = NaN(nBins, size(velocityData,1));
    for iTrial = 1 : size(velocityData, 1)
        binnedVelocity(1:nBins-1, iTrial) = arrayfun(@(x) mean(velocityData(iTrial, x:x+framesPerBin-1)), 1:framesPerBin:length(velocityData)-framesPerBin+1)';
    end
    binnedVelocity = reshape(binnedVelocity, [], 1);

    % Bin average dLight data.
    dLightData = fpData.switchTrial(:, fpTrialStart : 3300); 
    nBins = round(size(dLightData,2)/(binSize*100));
    binnedDlight = NaN(nBins, size(dLightData, 1));
    for iTrial = 1 : size(dLightData, 1)
        binnedDlight(1:nBins-1, iTrial) = arrayfun(@(x) mean(dLightData(iTrial, x:x+(binSize*100 - 1)), 'omitnan'), 1:(binSize*100):(length(dLightData) - (binSize*100 + 1)))';
    end
    binnedDlight = reshape(binnedDlight, [], 1);

    % GLME with time and velocity as independent variables, firing rate as dependent variable.
    trialTime = repmat(timep, size(dLightData, 1), 1);
    T = table(trialTime, binnedDlight, binnedVelocity, 'VariableNames', {'Time', 'Dlight', 'Velocity'});
    lmNeuron = fitglme(T, 'Dlight~Time + Velocity');
    lmNeuronAnova = anova(lmNeuron);
    glmStructure.pTime = [lmNeuronAnova{2,5}];
    glmStructure.pVelocity = [lmNeuronAnova{3,5}];
    glmStructure.LMtime = lmNeuron;
    a = fixedEffects(lmNeuron); 
    glmStructure.timeSlope = a(2);
    glmStructure.motorSlope = a(3);
